name: manual workflow

on:
  workflow_dispatch:
    branch: [ master ]
  schedule:
    - cron: '53 19 */9 * *'

env:
  CLOUDFLARE_DNS_API_TOKEN: ${{ secrets.CLOUDFLARE_DNS_API_TOKEN }}
  DOMAIN_NAME: ""
  LEGO_ACCOUNT_EMAIL: ${{ secrets.LEGO_ACCOUNT_EMAIL }}
  LEGO_STAGING: "true"
  LEGO_KEY_TYPE_EXCLUDES: rsa8192

jobs:
  lego_setup:
    runs-on: ubuntu-latest
    steps:
      - name: Cache lego binary
        uses: actions/cache@v2
        env:
          cache-name: cache-lego-binary
        with:
          path: ~/bin/lego
          key: ${{ runner.os }}-build-${{ env.cache-name }}-
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: install lego
        shell: bash
        run: |
          set -e
          [[ command -v lego ]] && exit 0
          mkdir -p ~/bin
          curl -sL "$(curl -sL https://api.github.com/repos/go-acme/lego/releases/latest 2>/dev/null | grep -oE -m1 https:.+/lego_v.+_linux_amd64.tar.gz)" | tar xz -C ~/bin lego
          echo ~/bin >> $GITHUB_PATH
      - name: lego --version
        run: lego ~/bin/lego
    
  lego_run:
    needs: [lego_setup]
    runs-on: ubuntu-latest
    steps:
      - shell: bash
        run: |
          set -e
          set -o pipefail
          # rsa8192 is not supported by Let's Encrypt (lego supports it)
          LEGO_SERVER_DEFAULT=$(lego help | grep -- "--server.*default" | perl -pe's/.*defaults?:.*?(https:[a-zA-Z0-9_:\/\.\-]+).*/$1/')
          LEGO_KEY_TYPE_DEFAULT=$(lego help | grep -- "--key-type.*default" | perl -pe's/.*defaults?:.*?([a-zA-Z0-9]+).*/$1/')
          LEGO_KEY_TYPES=($(lego help | grep -- --key-type | grep -oE '[a-z]+[0-9]+' | sort -u))
          LEGO_KEY_TYPE_EXCLUDES=($(echo "$LEGO_KEY_TYPE_EXCLUDES" | grep -oE '[a-z]+[0-9]+' | sort -u))
          
          # update env
          DOMAIN_NAME=${DOMAIN_NAME:-${GITHUB_REPOSITORY#*/}}
          echo "DOMAIN_NAME=$DOMAIN_NAME" >> $GITHUB_ENV
          # update env          
          LEGO_ACCOUNT_EMAIL="${LEGO_ACCOUNT_EMAIL:-acme-lego@$DOMAIN_NAME}"
          echo "LEGO_ACCOUNT_EMAIL=$LEGO_ACCOUNT_EMAIL" >> $GITHUB_ENV
          # update env
          LEGO_STAGING=$([[ $LEGO_STAGING == [tTyY1]* ]] && echo 1)
          echo "LEGO_STAGING=$LEGO_STAGING" >> $GIHUB_ENV
          # update env
          if [[ -z $LEGO_SERVER ]]; then
            if [[ -n $LEGO_STAGING ]]; then
              LEGO_SERVER=https://acme-staging-v02.api.letsencrypt.org/directory
            else
              LEGO_SERVER=$LEGO_SERVER_DEFAULT
            fi
          fi

          lego_opts=()
          lego_opts+=( --accept-tos --email "$LEGO_ACCOUNT_EMAIL" )
          lego_opts+=( --dns cloudflare )
          lego_opts+=( --pem )
          lego_opts+=( --domains "*.$DOMAIN_NAME" )
          lego_opts+=( --domains "*.lo.$DOMAIN_NAME" )
          lego_opts+=( --domains "*.localhost.$DOMAIN_NAME" )
          lego_opts+=( --server "$LEGO_SERVER" )

          LEGO_PATH_SERVER="$GITHUB_WORKSPACE/lego-pathes/${LEGO_SERVER//[^a-zA-Z0-9_\.\-]/_}"
          mkdir -p "$LEGO_PATH_SERVER"
          LOG_PATH="$LEGO_PATH_SERVER.log-$(date +%Y%m%dT%H%M%S%z)"
          RELEASE_PATH="$GITHUB_WORKSPACE/release"
          mkdir -p "$RELEASE_PATH"
          for key_type in "${LEGO_KEY_TYPES[@]}"; do
            echo "START: key-type=$key_type"
            key_type_excluded=
            for t in "${LEGO_KEY_TYPE_EXCLUDES[@]}"; do
              if [[ $key_type == "$t" ]]; then
                key_type_excluded=1
              fi
            done
            if [[ -n $key_type_excluded ]]; then
              echo "SKIP: key-type=$key_type is excluded."
              continue
            fi
            LEGO_PATH="$LEGO_PATH_SERVER/$key_type"
            mkdir -p "$LEGO_PATH"
            # wait until dns cache expires
            if grep -qi "acme:.*Try.*DNS-[0-9]" "$LOG_PATH"; then
              sleep 90
            fi
            echo '${{ secrets.LEGO_ACCOUNTS_TGZ }}' | base64 -d | tar xz -C "$LEGO_PATH" || :
            LEGO_PATH=$LEGO_PATH lego "${lego_opts[@]}" run || :
            ( cd "$LEGO_PATH/certificates" && tar cfz "$RELEASE_PATH/${DOMAIN_NAME}-certificate-${key_type}.tar.gz" * )
          done | tee "$LOG_PATH"
          cp -ap "$RELEASE_PATH/${DOMAIN_NAME}-certificate-${LEGO_KEY_TYPE_DEFAULT}".tar.gz "${RELEASE_PATH}/${DOMAIN_NAME}-certificate-default.tar.gz"
          tar xfz "${RELEASE_PATH}/${DOMAIN_NAME}-certificate-default.tar.gz" -C "${RELEASE_PATH}"
          find "${RELEASE_PATH}"

  test:
    runs-on: ubuntu-latest
    needs: [lego_run]
    steps:
      - run: |
          echo find-----------------------------------------------
          find
          echo env------------------------------------------------
          env        

  create_release:
    name: Create release
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: false

  upload_assets:
    name: Upload assets
    needs: [create_release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ needs.create_release.outputs.id }}';
            console.log({github, context})
            for (let file of fs.readdirSync('./release')) {
              console.log('found', file);
              if ( /.*(\.tar\.gz|key|crt|pem)$/.test(path) ) {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./release/${file}`)
                });
              }
            }

